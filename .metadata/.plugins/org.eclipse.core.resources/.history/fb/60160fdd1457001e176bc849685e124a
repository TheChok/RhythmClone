package beat_16;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.util.ArrayList;

import javax.swing.ImageIcon;

// Game //
public class Game extends Thread {
	
	// 게임에서 사용할 이미지
	private Image		gameInfoImage			= new ImageIcon(Main.class.getResource("../images/gameInfo.png")).getImage();
	private Image		judgementLineImage		= new ImageIcon(Main.class.getResource("../images/judgementLine.png")).getImage();
	private Image		noteRouteLineImage		= new ImageIcon(Main.class.getResource("../images/noteRouteLine.png")).getImage();
	
	// 노트 이미지(S,D,F, SPACE, J,K,L)
	private Image		noteRouteSImage			= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteDImage			= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteFImage			= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteSpace1Image	= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteSpace2Image	= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteJImage			= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteKImage			= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	private Image		noteRouteLImage			= new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	
	// 플레어 이미지
	private Image		blueFlareImage			= new ImageIcon(Main.class.getResource("../images/blueFlare.png")).getImage();
	
	// 판정 이미지
	private Image		judgeImage				= new ImageIcon(Main.class.getResource("../images/judgeEarly.png")).getImage();
	
	// 키 패드 이미지(S,D,F, SPACE, J,K,L)
	private Image		keyPadSImage			= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadDImage			= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadFImage			= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadSpace1Image		= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadSpace2Image		= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadJImage			= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadKImage			= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	private Image		keyPadLImage			= new ImageIcon(Main.class.getResource("../images/keyPadBasic.png")).getImage();
	
	
	// 화면에서 떨어지는 노트들을 담을 리스트
	ArrayList<Note> noteList = new ArrayList<Note>();

	
	private String		titleName;
	private	String		difficulty;
	private String		musicTitle;
	private Music		gameMusic;
	
	public Game(String titleName, String difficulty, String musicTitle) {
		this.titleName  = titleName;
		this.difficulty = difficulty;
		this.musicTitle = musicTitle;
		gameMusic = new Music(this.musicTitle, false);
		
	}
	
	
	// screenDraw //
	public void screenDraw(Graphics2D g) {

		// 노트 라인
		g.drawImage(noteRouteLineImage, 224, 30, null);
		g.drawImage(noteRouteSImage, 	228, 30, null);		// S
		g.drawImage(noteRouteLineImage, 328, 30, null);
		g.drawImage(noteRouteDImage, 	332, 30, null);		// D
		g.drawImage(noteRouteLineImage, 432, 30, null);
		g.drawImage(noteRouteFImage, 	436, 30, null);		// F
		g.drawImage(noteRouteLineImage, 536, 30, null);
		
		g.drawImage(noteRouteSpace1Image, 540, 30, null);	// Space
		g.drawImage(noteRouteSpace2Image, 640, 30, null);	// Space
		
		g.drawImage(noteRouteLineImage, 740, 30, null);
		g.drawImage(noteRouteJImage, 	744, 30, null);		// J
		g.drawImage(noteRouteLineImage, 844, 30, null);
		g.drawImage(noteRouteKImage, 	848, 30, null);		// K
		g.drawImage(noteRouteLineImage, 948, 30, null);
		g.drawImage(noteRouteLImage, 	952, 30, null);		// L
		g.drawImage(noteRouteLineImage, 1052, 30, null);
		
		
		for(int i = 0; i < noteList.size(); i++) {
			Note note = noteList.get(i);
			
			// 진행 상태가 아닌 노트의 처리
			if(!note.isProceeded()) {
				noteList.remove(i);
				i--;
				
			} else {
				note.screenDraw(g);
			}
			
		}
		
		
		// 판정 라인 
		g.drawImage(gameInfoImage, 		0, 660, null);
		g.drawImage(judgementLineImage, 0, 580, null);
		
		// 타이틀 표시
		g.setColor(Color.white);
		g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
		
		g.setColor(Color.WHITE);
		g.setFont(new Font("Arial", Font.BOLD, 30));
		g.drawString(titleName,    20, 702);
		g.drawString(difficulty, 1190, 702);
		
		// 키패드 표시
		g.setFont(new Font("Arial", Font.PLAIN, 26));
		g.setColor(Color.DARK_GRAY);
		g.drawString("S", 270, 609);
		g.drawString("D", 374, 609);
		g.drawString("F", 478, 609);
		
		g.drawString("Space Bar", 580, 609);
		
		g.drawString("J", 784, 609);
		g.drawString("K", 889, 609);
		g.drawString("L", 993, 609);
		
		// 점수 표시
		g.setColor(Color.LIGHT_GRAY);
		g.setFont(new Font("Elephant", Font.BOLD, 30));
		g.drawString("000000", 565, 702);
		
		// 플레어 이미지
		g.drawImage(blueFlareImage, 	230, 280, null);
		
		// 판정 이미지
		g.drawImage(judgeImage, 		450, 400, null);
		
		// 키패드 이미지
		g.drawImage(keyPadSImage, 		228, 580, null);
		g.drawImage(keyPadDImage, 		332, 580, null);
		g.drawImage(keyPadFImage, 		436, 580, null);
		g.drawImage(keyPadSpace1Image, 	540, 580, null);
		g.drawImage(keyPadSpace2Image, 	640, 580, null);
		g.drawImage(keyPadJImage, 		744, 580, null);
		g.drawImage(keyPadKImage, 		848, 580, null);
		g.drawImage(keyPadLImage, 		952, 580, null);
		
	} // End - screenDraw
	
	
	// 키 이벤트 //
	// S
	public void pressS() {
		judge("S");
		new Music("drum1.mp3", false).start();
		noteRouteSImage = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseS() {
		noteRouteSImage = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}
	
	// D
	public void pressD() {
		judge("D");
		new Music("drum1.mp3", false).start();
		noteRouteDImage = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseD() {
		noteRouteDImage = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}
	
	// F
	public void pressF() {
		judge("F");
		new Music("drum1.mp3", false).start();
		noteRouteFImage = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseF() {
		noteRouteFImage = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}

	// Space
	public void pressSpace() {
		judge("Space");
		new Music("drum2.mp3", false).start();
		noteRouteSpace1Image = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
		noteRouteSpace2Image = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseSpace() {
		noteRouteSpace1Image = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
		noteRouteSpace2Image = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}
	
	// J
	public void pressJ() {
		judge("J");
		new Music("drum1.mp3", false).start();
		noteRouteJImage = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseJ() {
		noteRouteJImage = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}
	
	// K
	public void pressK() {
		judge("K");
		new Music("drum1.mp3", false).start();
		noteRouteKImage = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseK() {
		noteRouteKImage = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}
	
	// L
	public void pressL() {
		judge("L");
		new Music("drum1.mp3", false).start();
		noteRouteLImage = new ImageIcon(Main.class.getResource("../images/noteRoutePressed.png")).getImage();
	}
	public void releaseL() {
		noteRouteLImage = new ImageIcon(Main.class.getResource("../images/noteRoute.png")).getImage();
	}
	// End - keyEvent
	
	
	// run //
	@Override
	public void run() {
		dropNotes(this.titleName);
	} // End - run
	
	
	public void close() {
		gameMusic.close();
		this.interrupt();
	}
	
	
	// dropNotes //
	public void dropNotes(String titleName) {
		Beat[] beats = null;
		
		if("HYP - Picnic".equals(titleName) && "Easy".equals(difficulty)) {
			int startTime = 4460 - Main.REACH_TIME * 1000;
			int gap = 125;
			
			beats = new Beat[] {
				new Beat(startTime, "S"),
				new Beat(startTime + gap * 2, "D"),
				new Beat(startTime + gap * 4, "S"),
				new Beat(startTime + gap * 6, "D"),
				new Beat(startTime + gap * 8, "S"),
				new Beat(startTime + gap * 10, "D"),
				new Beat(startTime + gap * 12, "S"),
				new Beat(startTime + gap * 14, "D"),
				new Beat(startTime + gap * 18, "J"),
				new Beat(startTime + gap * 20, "K"),
				new Beat(startTime + gap * 22, "J"),
				new Beat(startTime + gap * 24, "K"),
				new Beat(startTime + gap * 26, "J"),
				new Beat(startTime + gap * 28, "K"),
				new Beat(startTime + gap * 30, "J"),
				new Beat(startTime + gap * 32, "K"),
				new Beat(startTime + gap * 36, "S"),
				new Beat(startTime + gap * 38, "D"),
				new Beat(startTime + gap * 40, "S"),
				new Beat(startTime + gap * 42, "D"),
				new Beat(startTime + gap * 44, "S"),
				new Beat(startTime + gap * 46, "D"),
				new Beat(startTime + gap * 48, "J"),
				new Beat(startTime + gap * 49, "K"),
				new Beat(startTime + gap * 50, "L"),
				new Beat(startTime + gap * 52, "F"),
				new Beat(startTime + gap * 52, "Space"),
				new Beat(startTime + gap * 52, "J"),
			};
			
		} else if("HYP - Picnic".equals(titleName) && "Hard".equals(difficulty)) {
			int startTime = 1000;
			beats = new Beat[] {
				new Beat(startTime, "Space"),	
			};
			
		} else if("HYP - Full Of Sunshine".equals(titleName) && "Easy".equals(difficulty)) {
			int startTime = 1000;
			beats = new Beat[] {
				new Beat(startTime, "Space"),	
			};
			
		} else if("HYP - Full Of Sunshine".equals(titleName) && "Hard".equals(difficulty)) {
			int startTime = 1000;
			beats = new Beat[] {
				new Beat(startTime, "Space"),	
			};
			
		}
		
		int i = 0;
		
		gameMusic.start();
		
		while(i < beats.length && !isInterrupted()) {
			boolean dropped = false;
			
			if(beats[i].getTime() <= gameMusic.getTime()) {
				Note note = new Note(beats[i].getNoteName());
				note.start();
				noteList.add(note);
				i++;
				dropped = true;
			}
			
			if(!dropped) {
				try {
					Thread.sleep(5);
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
		}
		
	} // End - dropNotes
	
	
	// 판정 함수
	public void judge(String input) {
		for(int i = 0; i < noteList.size(); i++) {
			Note note = noteList.get(i);
			
			if(input.equals(note.getNoteType())) {
				note.judge();
				break;
			}
		}
	}
	
	
} // End - Game
